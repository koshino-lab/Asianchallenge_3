AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 instance with nginx and Application Load Balancer

Parameters:
  KeyName:
    Description: EC2 Key Pair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: asianchallenge-key

  DomainName:
    Description: Domain name for the application
    Type: String
    Default: roten-app.com

  HostedZoneId:
    Description: Route 53 Hosted Zone ID
    Type: String
    Default: Z04063947ZOXL77XCSM8

  CertificateArn:
    Description: ACM Certificate ARN for HTTPS
    Type: String
    Default: arn:aws:acm:ap-northeast-1:483996525205:certificate/09cfbc23-2ace-4f7c-87a4-5de314c628a4

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet1: # NATを使うコスト削減のため、パブリックに設定
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp # nginxをWebサーバーとして使うため、HTTPアクセス（ポート80）を許可
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-07faa35bbd2230d90
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData: # EC2インスタンスの起動時に全ての環境を自動セットアップ
        Fn::Base64: !Sub |
          #!/bin/bash
          # ログ出力の設定
          exec > >(tee /var/log/user-data.log)
          exec 2>&1

          # システムの更新
          yum update -y

          # 1. PostgreSQL 15のインストールと設定
          echo "=== Installing PostgreSQL 15 ==="
          yum install -y postgresql15 postgresql15-server
          postgresql-setup --initdb

          # PostgreSQLを起動（認証変更前）
          systemctl enable postgresql
          systemctl start postgresql

          # データベースとユーザーの作成（認証変更前に実行）
          sudo -u postgres psql << EOF
          CREATE USER flaskuser WITH PASSWORD 'password';
          CREATE DATABASE quiz_rally OWNER flaskuser;
          GRANT ALL PRIVILEGES ON DATABASE quiz_rally TO flaskuser;
          EOF

          # PostgreSQLの認証設定を変更
          sed -i 's/ident/md5/g' /var/lib/pgsql/data/pg_hba.conf
          sed -i 's/peer/md5/g' /var/lib/pgsql/data/pg_hba.conf

          # PostgreSQLを再起動して設定を反映
          systemctl restart postgresql

          # 2. Python 3.12とGitのインストール
          echo "=== Installing Python 3.12 and Git ==="
          yum install -y python3.12 python3.12-pip python3.12-devel git gcc

          # 3. nginxのインストールと設定
          echo "=== Installing and configuring nginx ==="
          yum install -y nginx

          # Flask用のnginx設定
          cat > /etc/nginx/conf.d/flask-app.conf << 'NGINX_EOF'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_EOF

          # nginxを起動
          systemctl enable nginx
          systemctl start nginx

          # 4. アプリケーションのデプロイ
          echo "=== Deploying Flask application ==="
          mkdir -p /opt/app
          chown ec2-user:ec2-user /opt/app

          # アプリケーションをクローン
          cd /opt/app
          sudo -u ec2-user git clone https://github.com/koshino-lab/Asianchallenge_3.git

          # 5. Python仮想環境とアプリケーションのセットアップ
          echo "=== Setting up Python environment ==="
          cd /opt/app/Asianchallenge_3/backend
          sudo -u ec2-user python3.12 -m venv venv
          sudo -u ec2-user /opt/app/Asianchallenge_3/backend/venv/bin/pip install --upgrade pip

          # 依存関係をインストール（PyTorch関連は既に削除済み）
          sudo -u ec2-user /opt/app/Asianchallenge_3/backend/venv/bin/pip install -r requirements.txt

          # 環境変数ファイルの作成
          sudo -u ec2-user cat > /opt/app/Asianchallenge_3/backend/.env << 'ENV_EOF'
          DATABASE_URL=postgresql://flaskuser:password@localhost:5432/quiz_rally
          SECRET_KEY=your-secret-key-here-change-this
          ENV_EOF
          chmod 600 /opt/app/Asianchallenge_3/backend/.env
          chown ec2-user:ec2-user /opt/app/Asianchallenge_3/backend/.env

          # 6. systemdサービスの設定
          echo "=== Creating systemd service ==="
          cat > /etc/systemd/system/flask-app.service << 'SERVICE_EOF'
          [Unit]
          Description=Flask Backend Application
          After=network.target postgresql.service

          [Service]
          Type=simple
          User=ec2-user
          Group=ec2-user
          WorkingDirectory=/opt/app/Asianchallenge_3/backend
          Environment="PATH=/opt/app/Asianchallenge_3/backend/venv/bin"
          ExecStart=/opt/app/Asianchallenge_3/backend/venv/bin/python /opt/app/Asianchallenge_3/backend/main.py
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

          # サービスを有効化して起動
          systemctl daemon-reload
          systemctl enable flask-app.service
          systemctl start flask-app.service

          echo "=== Setup completed! ==="

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access for ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckPath: /
      Targets:
        - Id: !Ref MyInstance

  # HTTPリスナー（HTTPSへのリダイレクト）
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  # HTTPSリスナー
  MyALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # Route 53 Aレコード
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt MyALB.CanonicalHostedZoneID
        DNSName: !GetAtt MyALB.DNSName

Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt MyALB.DNSName

  ApplicationURL:
    Description: URL of the application
    Value: !Sub "https://${DomainName}"
